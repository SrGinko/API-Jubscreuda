// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id                  String @id @unique
  username            String
  foto                String
  nivel               Int    @default(1)
  xp                  Int    @default(0)
  wallpaper           Int
  quantidadeMensagens Int    @default(0)
  Descricao           String @default("")
  heroi               Heroi?

  @@map("Usuarios")
}

model Heroi {
  id         String      @id @default(cuid())
  nome       String
  hp         Int         @default(100)
  attack     Int         @default(10)
  defense    Int         @default(5)
  level      Int         @default(1)
  xp         Int         @default(0)
  moeda      Int         @default(200)
  inventario Inventario?

  armaID Int?
  aram   Item? @relation("ArmaEquipada", fields: [armaID], references: [id])

  armaduraID Int?
  armadura   Item? @relation("AramaduraEquipada", fields: [armaduraID], references: [id])

  calcaID Int?
  calca   Item? @relation("CalcaEquipada", fields: [calcaID], references: [id])

  creatAt DateTime @default(now())
  update  DateTime @updatedAt

  userID String  @unique
  user   Usuario @relation(fields: [userID], references: [id])

  @@map("Herois")
}

model Inventario {
  id      String @id @default(cuid())
  heroiID String @unique
  heroi   Heroi  @relation(fields: [heroiID], references: [id], onDelete: Cascade)

  itens ItemInventario[]

  @@map("Inventarios")
}

model ItemInventario {
  id         String @id @default(cuid())
  quantidade Int    @default(1)

  inventarioId String
  inventario   Inventario @relation(fields: [inventarioId], references: [id] , onDelete: Cascade)

  itemID Int
  item   Item @relation(fields: [itemID], references: [id])

  @@unique([inventarioId, itemID])
  @@map("ItemInventarios")
}

model Item {
  id        Int      @id @default(autoincrement())
  nome      String   @unique
  descricao String
  raridade  Raridade
  tipo      ItemType
  preco     Int
  ataque    Int?
  defesa    Int?
  heal      Int?
  imagem    String?

  armaEquipada     Heroi[] @relation("ArmaEquipada")
  armaduraEquipada Heroi[] @relation("AramaduraEquipada")
  calcaEquipada    Heroi[] @relation("CalcaEquipada")

  itemInventario ItemInventario[]

  @@map("Items")
}

model Inimigo {
  id     Int     @id @default(autoincrement())
  nome   String  @unique
  vida   Int
  nivel  Int
  ataque Int
  defesa Int
  imagem String?

  @@map("Inimigos")
}

model Canal {
  id     Int    @id @default(autoincrement())
  nome   String
  url    String
  capaUrl String?

  @@map("Canais")
}

model Serie{
  id Int @id @default(autoincrement())
  titulo String @unique
  descricao String?
  capaUrl String?
  criadoEm DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  temporadas Temporada[]

  
  @@map("Series")
}

model Temporada{
  id String @id @default(cuid())
  numero Int
  serieId Int

  serie Serie @relation(fields: [serieId], references: [id], onDelete: Cascade )
  episodios Episodio[]

  @@map("Temporadas")
}

model Episodio{
  id Int @id @default(autoincrement())
  titulo String
  numero Int
  capaUrl String
  temporadaId String

  temporada Temporada @relation(fields: [temporadaId], references: [id], onDelete: Cascade)
}

enum ItemType {
  ARMADURA
  CALCA
  ARMA
  CONSUMIVEL
  OUTRO
}

enum Raridade {
  COMUM
  RARA
  EPICA
  LENDARIA
}
